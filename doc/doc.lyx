#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language bulgarian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language german
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\series bold
\emph on
Paracalc
\emph default
: разпределен калкулатор
\end_layout

\begin_layout Title
Проект по 
\begin_inset Quotes gld
\end_inset

Системи за паралелна обработка
\begin_inset Quotes grd
\end_inset


\end_layout

\begin_layout Title
Факултет по математика и информатика, Софийски университет 
\begin_inset Quotes gld
\end_inset

Св.
 Кл.
 Охридски
\begin_inset Quotes grd
\end_inset


\end_layout

\begin_layout Author
Радослав Георгиев, ф.н.
 81030, специалност КН
\end_layout

\begin_layout Date
2.
 юли 2016 г.
\end_layout

\begin_layout Section*
Проект
\end_layout

\begin_layout Standard
Това е реализация на 
\emph on
parser
\emph default
 за прост аритметичен израз, допускащ употребата на скоби, зададен със следната
 граматика:
\end_layout

\begin_layout Standard
\begin_inset Formula $\Gamma=\left(\varSigma,N,S,P\right)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $N=\{E,T,F\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $\varSigma=([$
\end_inset

0
\begin_inset Formula $-$
\end_inset

9
\begin_inset Formula $],$
\end_inset

+
\begin_inset Formula $,$
\end_inset

-
\begin_inset Formula $,$
\end_inset

*
\begin_inset Formula $,$
\end_inset

/
\begin_inset Formula $,$
\end_inset

(
\begin_inset Formula $,$
\end_inset

)
\begin_inset Formula $)$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $S=E$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $P=\{E\rightarrow T|E$
\end_inset

+
\begin_inset Formula $T|E$
\end_inset

-
\begin_inset Formula $T,T\rightarrow F|T$
\end_inset

*
\begin_inset Formula $F|T$
\end_inset

/
\begin_inset Formula $F,F\rightarrow n|$
\end_inset

(
\begin_inset Formula $E$
\end_inset

)
\begin_inset Formula $\}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $n=$
\end_inset

0
\begin_inset Formula $|[$
\end_inset

1
\begin_inset Formula $-$
\end_inset

9
\begin_inset Formula $][$
\end_inset

0
\begin_inset Formula $-$
\end_inset

9
\begin_inset Formula $]*$
\end_inset


\end_layout

\begin_layout Standard
представена по-удобно като:
\end_layout

\begin_layout Verbatim

expression        -> term | expression Plus term | expression Minus term
\end_layout

\begin_layout Verbatim

term              -> factor | term Times factor | term Over factor
\end_layout

\begin_layout Verbatim

factor            -> Number | LeftParenthesis expression RightParenthesis
\end_layout

\begin_layout Verbatim

Number            -> '0' | [1-9] [0-9]*
\end_layout

\begin_layout Verbatim

Plus              -> '+'
\end_layout

\begin_layout Verbatim

Minus             -> '-'
\end_layout

\begin_layout Verbatim

Times             -> '*'
\end_layout

\begin_layout Verbatim

Over              -> '/'
\end_layout

\begin_layout Verbatim

LeftParenthesis   -> '('
\end_layout

\begin_layout Verbatim

RightParenthesis  -> ')'
\end_layout

\begin_layout Standard
Самият 
\emph on
parser
\emph default
 пресмята стойността на израза рекурсивно като страничен ефект на парсването
 му.
 Тъй като по дефиниция числата (т.е.
 
\family typewriter
Number
\family default
 терминалите от граматиката) могат да са само цели положителни, то под операцият
а 
\emph on
делене
\emph default
 ще разбираме целочислено делене.
\end_layout

\begin_layout Section*
Същност
\end_layout

\begin_layout Standard
Дадената по-горе граматика принадлежи към класа от граматики OPG (Operator
 Precedence Grammars) на Флойд.
 Това са безконтекстови (
\emph on
context-free
\emph default
) граматики, които могат да се използват за създаване на бързи детерминистични
 
\emph on
parser
\emph default
-и за безконтекстови езици.
\end_layout

\begin_layout Standard
Най-важното и отличително свойство на граматиките на Флойд е, че езиците,
 които те описват, са 
\emph on
локално парсваеми
\emph default
.
 За разлика от класическите детерминистични езици, където следващото действие
 при парсване може да зависи от информация, която се намира на произволно
 разстояние от текущата позиция на входния низ, при локално парсваемите
 езици всяко решение за следващо действие може да бъде взето по детерминистичен
 начин въз основа на някакъв ограничен контекст на текущата позиция.
 Т.е.
 ако имаме подниз 
\begin_inset Formula $s$
\end_inset

 на низ 
\begin_inset Formula $xsy$
\end_inset

, той ще може да бъде парснат независимо от контекста си, без да има риск
 от нарушаване на консистентността на частичното парсване при анализиране
 на друга част от целия низ.
 Такова свойство само по себе си е ключ към реализацията на паралелна обработка
 (т.е.
 паралелно парсване) на езика.
 Трябва да се отбележи, че всички предишни (т.е.
 преди да бъде измислен този алгоритъм) опити да се паралелизират традиционните
 алгоритми за парсване са срещнали неуспех (просто не са успели да изведат
 правилните резултати) поради липсата при тях именно на това свойство.
 Същото свойство позволява опростяване и подобряване на ефективността на
 вече съществуващи техники за инкрементално парсване.
\end_layout

\begin_layout Section*
Алгоритъм
\end_layout

\begin_layout Standard
Използвани са две алгоритмични схеми за подхождане към проблема: първата
 генерализира нормалното последователно парсване по такъв начин, че то да
 може да бъде приложено към незавършени низове, съдържащи терминали и нетерминал
и; втората разбива входния текст на поднизове и създава независими един
 от друг 
\emph on
нишки-работници
\emph default
 с цел извършване на локално парсване на всеки подниз.
 След това тя слива частичните резултати за последваща обработка до приключване.
\end_layout

\begin_layout Subsection*
Сложност
\end_layout

\begin_layout Standard
Теоретично е доказано, че този алгоритъм е с много по-малка изчислителна
 сложност от предишно разработените паралелни парсващи алгоритми.
 Тови доказателство се потвърждава на практика от имплементацията на този
 инструмент.
\end_layout

\begin_layout Standard
Алгоритъмът постига асимптотично линейно ускорение с растежа на броя на
 процесорите в най-добрия случай.
 В най-лошия случай сложността му не надвишава сложността на обикновено
 последователно парсване.
\end_layout

\begin_layout Standard
С това алгоритъмът покрива изискванията за ефективност на паралелното парсване.
\end_layout

\end_body
\end_document
